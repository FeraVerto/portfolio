[{"/Users/klevakin/masha/It-Incubator/CSS/portfolio/src/App.jsx":"1","/Users/klevakin/masha/It-Incubator/CSS/portfolio/src/index.tsx":"2","/Users/klevakin/masha/It-Incubator/CSS/portfolio/src/component/Header/Menu/Menu.tsx":"3","/Users/klevakin/masha/It-Incubator/CSS/portfolio/src/component/Header/Header.tsx":"4","/Users/klevakin/masha/It-Incubator/CSS/portfolio/src/component/AboutMe/AboutMe.tsx":"5","/Users/klevakin/masha/It-Incubator/CSS/portfolio/src/component/Skills/Skill/Skill.tsx":"6","/Users/klevakin/masha/It-Incubator/CSS/portfolio/src/component/Skills/Skills.tsx":"7","/Users/klevakin/masha/It-Incubator/CSS/portfolio/src/component/Works/Works.tsx":"8","/Users/klevakin/masha/It-Incubator/CSS/portfolio/src/component/Works/Work/Work.tsx":"9","/Users/klevakin/masha/It-Incubator/CSS/portfolio/src/reportWebVitals.ts":"10","/Users/klevakin/masha/It-Incubator/CSS/portfolio/src/component/Experimental/Experimental.jsx":"11","/Users/klevakin/masha/It-Incubator/CSS/portfolio/src/component/Contacts/Contacts.tsx":"12","/Users/klevakin/masha/It-Incubator/CSS/portfolio/src/component/Contacts/socialIcon/sociallcon.tsx":"13","/Users/klevakin/masha/It-Incubator/CSS/portfolio/src/component/MobileComponent/MobileMenu/MobileMenu.tsx":"14"},{"size":2405,"mtime":1619298380646,"results":"15","hashOfConfig":"16"},{"size":610,"mtime":1618937005117,"results":"17","hashOfConfig":"16"},{"size":749,"mtime":1619041076761,"results":"18","hashOfConfig":"16"},{"size":330,"mtime":1619288961909,"results":"19","hashOfConfig":"16"},{"size":2125,"mtime":1619286811422,"results":"20","hashOfConfig":"16"},{"size":656,"mtime":1619033148254,"results":"21","hashOfConfig":"16"},{"size":1737,"mtime":1619108026924,"results":"22","hashOfConfig":"16"},{"size":2113,"mtime":1619108173367,"results":"23","hashOfConfig":"16"},{"size":727,"mtime":1619036270637,"results":"24","hashOfConfig":"16"},{"size":425,"mtime":1608204175728,"results":"25","hashOfConfig":"16"},{"size":397,"mtime":1619028171701,"results":"26","hashOfConfig":"16"},{"size":2403,"mtime":1619285427242,"results":"27","hashOfConfig":"16"},{"size":736,"mtime":1619283791461,"results":"28","hashOfConfig":"16"},{"size":1078,"mtime":1619298067074,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"127wuop",{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"34"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"34"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"34"},"/Users/klevakin/masha/It-Incubator/CSS/portfolio/src/App.jsx",[],"/Users/klevakin/masha/It-Incubator/CSS/portfolio/src/index.tsx",[],["63","64"],"/Users/klevakin/masha/It-Incubator/CSS/portfolio/src/component/Header/Menu/Menu.tsx",[],"/Users/klevakin/masha/It-Incubator/CSS/portfolio/src/component/Header/Header.tsx",[],"/Users/klevakin/masha/It-Incubator/CSS/portfolio/src/component/AboutMe/AboutMe.tsx",["65"],"import React from 'react'\nimport s from './AboutMe.module.css'\nimport photo from './../../image/avatar.jpg'\nimport ReactTypingEffect from 'react-typing-effect'\n\nexport const AboutMe = () => {\n    return (\n        <div className={s.about}>\n            <div className={s.about_block}>\n                <h1 className={s.about_h1}>\n                    <p className={s.p_hi}>I'm</p>\n                    <p className={s.p_name}> Mariya Klevakina</p>\n                    <p className={s.p_hi}>front-end developer.</p>\n                    {/*<ReactTypingEffect\n                            text={[\"Hello.\", \"World!\"]}\n                        />*/}\n\n                    <span className={s.typing_effect}>\n                        <ReactTypingEffect\n                            className={s.react_typing}\n                            text={[\"All I need is code\", \"Code is all I need\"]}\n                            eraseDelay={1000}\n                            eraseSpeed={20}\n                            //@ts-ignore\n                            cursorRenderer={(cursor: any) => <h1>{cursor}</h1>}\n                            displayTextRenderer={(text: any, i: any) => {\n                                return (\n                                    <span>\n                                    {text.split('').map((char: any, i: any) => {\n                                        const key = `${i}`;\n                                        return (\n                                            <span\n                                                key={key}\n                                                style={{height: \"60px\"}}\n                                            >{char}</span>\n                                        );\n                                    })}\n                                </span>\n                                );\n                            }}\n                        />\n                    </span>\n                </h1>\n                <div className={s.about_photo}>\n                    <img src={photo} alt=\"photo\" width={400} height={500}/>\n                </div>\n            </div>\n        </div>\n    )\n}","/Users/klevakin/masha/It-Incubator/CSS/portfolio/src/component/Skills/Skill/Skill.tsx",[],"/Users/klevakin/masha/It-Incubator/CSS/portfolio/src/component/Skills/Skills.tsx",[],"/Users/klevakin/masha/It-Incubator/CSS/portfolio/src/component/Works/Works.tsx",[],"/Users/klevakin/masha/It-Incubator/CSS/portfolio/src/component/Works/Work/Work.tsx",[],"/Users/klevakin/masha/It-Incubator/CSS/portfolio/src/reportWebVitals.ts",[],"/Users/klevakin/masha/It-Incubator/CSS/portfolio/src/component/Experimental/Experimental.jsx",[],["66","67"],"/Users/klevakin/masha/It-Incubator/CSS/portfolio/src/component/Contacts/Contacts.tsx",["68"],"import React from 'react'\nimport s from \"./Contacts.module.css\"\nimport {useFormik} from \"formik\";\nimport {SocialIcon} from \"./socialIcon/sociallcon\";\n\nexport const Contacts = () => {\n\n    const formik = useFormik({\n        initialValues: {\n            name: '',\n            email: '',\n            message: ''\n        },\n        onSubmit: values => {\n            console.log(\"values\", values)\n        },\n    });\n\n    return (\n        <div className={s.contacts}>\n            <h2>Contacts</h2>\n            <div className={s.contacts_container}>\n                <div className={s.contacts_block}>\n                    <h3 className={s.h3}>Get in Touch</h3>\n                    <ul className={s.contact_list}>\n                        <li className={s.contact_item}>\n                            <span>\n                                <a href=\"tel:89920149906\">\n                                    +7-992-014-99-06\n                                </a>\n                            </span>\n                        </li>\n                        <li className={s.contact_item}>\n                            <span>\n                                <a href=\"mailto:klevakina.maria.ekb@gmail.com\">\n                                    klevakina.maria.ekb@gmail.com\n                                </a>\n                            </span>\n                        </li>\n                    </ul>\n\n                </div>\n\n                <form onSubmit={formik.handleSubmit} className={s.contacts_form}>\n\n                    <div className={s.contacts_form_data}>\n                        <input id={\"name\"}\n                               placeholder={\"Your name *\"}\n                               type=\"text\"\n                               {...formik.getFieldProps('name')}\n                        />\n                        <input id={\"email\"}\n                               placeholder={\"Your email *\"}\n                               type=\"text\"\n                               {...formik.getFieldProps('email')}/>\n                    </div>\n\n                    <textarea id={\"message\"}\n                              placeholder={\"Your message\"}\n                              rows={6}\n                              {...formik.getFieldProps('message')}>\n                    </textarea>\n\n                    <button type=\"submit\">Отправить</button>\n                </form>\n            </div>\n        </div>\n    )\n}","/Users/klevakin/masha/It-Incubator/CSS/portfolio/src/component/Contacts/socialIcon/sociallcon.tsx",[],"/Users/klevakin/masha/It-Incubator/CSS/portfolio/src/component/MobileComponent/MobileMenu/MobileMenu.tsx",["69"],"import React, {useEffect} from 'react'\nimport s from './MobileMenu.module.css'\nimport {NavLink} from \"react-router-dom\";\n\ntype MobileMenuType = {\n    onClose: () => void\n}\n\nexport const MobileMenu: React.FC<MobileMenuType> = ({onClose}) => {\n\n    return (\n        <div className={s.mobile_menu_container}>\n            <ul className={s.mobile_menu_list}>\n\n                <li className={s.mobile_menu_item}>\n                    <NavLink className={s.item_link} to=\"/\">Home</NavLink>\n                </li>\n                <li className={s.mobile_menu_item}>\n                    <NavLink className={s.item_link} to=\"/skills\">Skills</NavLink>\n                </li>\n                <li className={s.mobile_menu_item}>\n                    <NavLink className={s.item_link} to=\"/works\">Works</NavLink>\n                </li>\n                <li className={s.mobile_menu_item}>\n                    <NavLink className={s.item_link} to=\"/contacts\">Contacts</NavLink>\n                </li>\n            </ul>\n            <div onClick={onClose}>Close\n            </div>\n        </div>\n\n    )\n}",{"ruleId":"70","replacedBy":"71"},{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","severity":1,"message":"75","line":45,"column":21,"nodeType":"76","endLine":45,"endColumn":76},{"ruleId":"70","replacedBy":"71"},{"ruleId":"72","replacedBy":"73"},{"ruleId":"77","severity":1,"message":"78","line":4,"column":9,"nodeType":"79","messageId":"80","endLine":4,"endColumn":19},{"ruleId":"77","severity":1,"message":"81","line":1,"column":16,"nodeType":"79","messageId":"80","endLine":1,"endColumn":25},"no-native-reassign",["82"],"no-negated-in-lhs",["83"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","@typescript-eslint/no-unused-vars","'SocialIcon' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","no-global-assign","no-unsafe-negation"]